package kr.co.ezen.main;

import org.springframework.context.support.ClassPathXmlApplicationContext;

/* 
AOP(Aspect Oriented Programming)
----------------------------------------------
 - 관점(관심사) 지향적 프로그래밍
 - 하나의 프로그램을 관점이라는 논리적인 단위로 분리하여 관리하려는 개념
 - 주로 많이 사용되는 부분이 로깅, 선언적 트랜잭션, 보안, 캐싱 등  
 - 여기서 메소드 호출을 관심사로 두고 실습하는 것을 기준으로 하겠습니다.
 - <생각> 관심사를 통하여 스프링프레임워크가 어떤 메소드가 호출되는지 관심있게 지켜보다가 
   특정 메소드가 호출되면, 자동으로 메소드 전과 후에 다른 메소드를 호출하도록 하는 것 입니다.
   
 - 용어
  1)Joint Point : 모듈이 삽입되어 동작하게 되는 특정 위치(예> 메소드 호출 등) : 기능 구현
  2)Point Cut : 다양한 Joint Point 중에서 어떤 것을 사용할 지 선택해야 합니다. : 현금관리 기능, 예외처리 기능
  3)Advice : Joint Point에 삽입되어서 동작할 수 있는 코드 : 프로그램 로직
  4)Weaving : Advice를 핵심 로직 코드에 적용하는 것 : 컴파일/실행
  5)Aspect : Point Cut + Advice
 
 -Advice 종류 
  1)before : 메소드 호출 전에 동작하는 Advice
  2)after : 예외 발생 여부에 관계없이 호출된 메소드의 동작이 완료되면 동작하는 Advice
  3)around : 메소드 호출 전과 후에 동작하는 Advice
  4)after-returning : 예외 없이 호출된 메소드의 동작이 완료되면 동작하는 Advice
  5)after-throwing : 호출된 메소드 동작 중 예외가 발생하였을 때 동작하는 Advice
 
  

 -Spring AOP 구현
  1)XML 구현방법
  2)@AspectJ 어노테이션을 이용하여 구현 방법
 
 - method(  )의 유형 
   1)원형 : 접근제한자,  반환값, 메소드명( int kor, int eng, int mat), 매개변수(전달인자)
           public   void  method1(                                        ) {
		System.out.println("method1의 호출.");		
	}

   2)메소드 오버로딩
     메소드 오버라이딩(상속: interface, class, abstract class) 
     @Override


 */

public class mainClass {

	public static void main(String[] args) {
		//XML 방식
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("kr/co/ezen/config/beans.xml");
		context.close();
	
		context.close();
	}	
}
