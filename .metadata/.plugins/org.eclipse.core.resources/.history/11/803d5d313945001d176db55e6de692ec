package kr.co.ezen.main;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import kr.co.ezen.beans.TestBean3;
import kr.co.ezen.beans.TestBean4;


/* ==============================================================================================================
* 
* BeanPostProcessor
* ---------------------------------------------
* -Bean 객체를 정의할 때 init-method 속성을 설정하면 객체가 생성될 때 자동으로 호출될 메소드를 지정할 수 있습니다.
* -이때, BeanPostProcessor 인터페이스를 구현한 클래스를 정의하면 Bean 객체를 생성 할 때
* 	호출되는 init 메소드 호출을 가로채어 다른 메소드를 호출 할 수 있습니다.
* -postProcessBeforeInitialization : init-method에 지정된 메소드가 호출되기 전에 호출 합니다.
* -postProcessAfterInitialization : init-method에 지정된 메소드가 호출된 다음에 호출 합니다.
* -init-method가 지정되어 있지 않더라도 자동으로 호출합니다.
*/
public abstract class mainClass{

	public static void main(String[] args) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("kr/co/ezen/config/beans.xml");
		
	
		//프로토타입이라서 같은거지만 주소값은 다름

		
		TestBean3 t3 = context.getBean("t3", TestBean3.class);
		System.out.println("t3 = " + t3);
		
		System.out.println("================================================");
		
		TestBean4 t4 = context.getBean("t4", TestBean4.class);
		System.out.println("t4 = " + t4);
		
		context.close();
		
	}
}
