package kr.co.ezen.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.WebRequest;

@Controller
public class TestController {

	/* 핸들러 매핑 */
	@RequestMapping(value = "/result", method = RequestMethod.GET)
	public String result(HttpServletRequest request) {
		String data1 = request.getParameter("data1");
		String data2 = request.getParameter("data2");
		
		int data_1 = Integer.parseInt(data1);
		int data_2 = Integer.parseInt(data2);
		
		int sum = data_1 + data_2 ;
		
		System.out.println("data1 : " + data1);
		System.out.println("data2 : " + data2);
		System.out.println("data1 + data2 = " + sum);
		
		return "result"; //result.jsp
	}
	@RequestMapping(value = "/result2", method = RequestMethod.GET)
	public String result2(HttpServletRequest request) {
		String data1 = request.getParameter("data1");
		String data2 = request.getParameter("data2");
		
		int data_1 = Integer.parseInt(data1);
		int data_2 = Integer.parseInt(data2);
		
		int sum = data_1 + data_2 ;
		
		System.out.println("data1 : " + data1);
		System.out.println("data2 : " + data2);
		System.out.println("data1 + data2 = " + sum);
		
		return "result2"; //result2.jsp
	}
	@RequestMapping(value = "/result3", method = RequestMethod.GET)
	public String result3(HttpServletRequest request) {
		String data1 = request.getParameter("data1");
		String data2 = request.getParameter("data2");
		String data3 = request.getParameter("data3");
		String data4 = request.getParameter("data4");
		String data5 = request.getParameter("data5");
		
		int data_1 = Integer.parseInt(data1);
		int data_2 = Integer.parseInt(data2);
		int data_3 = Integer.parseInt(data3);
		int data_4 = Integer.parseInt(data4);
		int data_5 = Integer.parseInt(data5);
		
		int sum = data_1 + data_2 + data_3 + data_4 + data_5 ;
		
		System.out.println("data1 : " + data1);
		System.out.println("data2 : " + data2);
		System.out.println("data3 : " + data3);
		System.out.println("data4 : " + data4);
		System.out.println("data5 : " + data5);
		System.out.println("합계는 = " + sum);
		
		return "result3"; //result3.jsp
	}
	@RequestMapping(value = "/result4", method = RequestMethod.GET)
	public String result4(HttpServletRequest request) {
		String[] data3 = request.getParameterValues("data_3");
		int sum = 0;
		
		if(data3 != null) {
			
			for(String str : data3) {
				System.out.println("data3 : " + str);
				int data_31 = Integer.parseInt(str);
				sum = sum + data_31;	
				}
		}
		System.out.println("data_3 : " + sum);
		return "result4"; //result3.jsp
	}
	@GetMapping(value = "/result5")
	public String result5(WebRequest request) {
		String data1 = request.getParameter("data1");
		String data2 = request.getParameter("data2");
		String data3 = request.getParameter("data3");
		String data4 = request.getParameter("data4");
		String data5 = request.getParameter("data5");
		
		int data_1 = Integer.parseInt(data1);
		int data_2 = Integer.parseInt(data2);
		int data_3 = Integer.parseInt(data3);
		int data_4 = Integer.parseInt(data4);
		int data_5 = Integer.parseInt(data5);
		
		int sum = data_1 + data_2+ data_3+ data_4+ data_5;
		
		System.out.println("data1~data5" + sum);
		
		return "result5"; //result5.jsp
	}
	
	@GetMapping("/test5/{data1}/{data2}/{data3}/{data4}/{data5}")
	public String test5(@PathVariable int data1,
					    @PathVariable int data2,
			 			@PathVariable int data3,
			 			@PathVariable int data4,
			 			@PathVariable int data5) {
		
		System.out.println("data1 : " + data1);
		System.out.println("data2 : " + data2);
		System.out.println("data3 : " + data3);
		System.out.println("data4 : " + data4);
		System.out.println("data5 : " + data5);
		
		int add = data1 + data2 + data3 + data4 + data5;
		System.out.println("덧셈의 합계 : " +  add);
		
		return "result6";//result6.jsp
	}
	
	  @GetMapping("/test6") 
	  public String test6(@RequestParam int data1,
			  			  @RequestParam int data2,
			  			  @RequestParam int data3,
			  			  @RequestParam int data4,
			  			  @RequestParam int data5) {
		  
		  int sum = 0;
		  sum = (data1 + data2+ data3+ data4+ data5);
			
			System.out.println("data1~data5" + sum); 
		  
		  return "result7"; //result7.jsp
	 }
	  @GetMapping("/test7") 
	  public String test7(@RequestParam(value="data1") int value1,
			  @RequestParam (value="data2") int value2,
			  @RequestParam (value="data3") int value3,
			  @RequestParam (value="data4") int value4,
			  @RequestParam (value="data5") int value5) {
		  
		  int sum = 0;
		  sum = (value1 + value2+ value3+ value4+ value5);
		  
		  System.out.println("data1~data5" + sum); 
		  
		  return "result8"; //result7.jsp
	  }
	  @GetMapping("/test8") 
	  public String test8(@RequestParam(value="data1") String data1,
			  @RequestParam (value="data2") String data2,
			  @RequestParam (value="data3") String data3,
			  @RequestParam (required = false) String data4,
			  @RequestParam (required = false) String data5) {
		  
		  int sum = 0;
		  
		  System.out.println(data1);
		  System.out.println(data2);
		  System.out.println(data3);
		  System.out.println(data4);
		  System.out.println(data5);
		  
		  System.out.println("data1~data5 =" + sum); 
		  
		  return "result9"; //result9.jsp
	  }
	  @GetMapping("/test9") 
	  public String test9(@RequestParam(value="data1") String data1,
			  @RequestParam (value="data2") String data2,
			  @RequestParam (value="data3") String data3,
			  @RequestParam (defaultValue = "0") String data4,
			  @RequestParam (defaultValue = "0") String data5) {
		  
		  int sum = 0;
		  
		  System.out.println(data1);
		  System.out.println(data2);
		  System.out.println(data3);
		  System.out.println(data4);
		  System.out.println(data5);
		  
		  System.out.println("data1~data5 =" + sum); 
		  
		  return "result10"; //result10.jsp
	  }
	  
	  @GetMapping("/test10") 
	  public String test10(@RequestParam(value="data1") String data1,
			  @RequestParam (value="data2") String data2,
			  @RequestParam (value="data3") String data3,
			  @RequestParam (required = false) String data4, //null
			  @RequestParam (defaultValue = "0") String data5) { //0
		  
		  int sum = 0;
		  
		  System.out.println(data1);
		  System.out.println(data2);
		  System.out.println(data3);
		  System.out.println(data4);
		  System.out.println(data5);
		  
		  System.out.println("data1~data5 =" + sum); 
		  
		  return "result10"; //result10.jsp
	  }
	  
	  @GetMapping("/test11") 
	  public String test11(@RequestParam Map<String, String> map) {
		  String data1 = map.get("data1");
		  String data2 = map.get("data2");
		  String data3 = map.get("data3");
		  
		  System.out.println(data1);
		  System.out.println(data2);
		  System.out.println(data3);
		  
		  return "result11";
	  }
	  @GetMapping("/test13") 
	  public String test13(@RequestParam Map<String, String> map,
			  				@RequestParam List<String> data2) {
		  String data1 = map.get("data1");
		  String data22 = map.get("data2");
		  String data33 = map.get("data2");
		  String data44 = map.get("data2");
		  
		  System.out.println(data1);
		  System.out.println(data22);
		  System.out.println(data33);
		  
		  return "result11";
	  }
}

/*
 * .요청 방식 지정하기
 * 
 * Spring MVC 는 요청 주소별로 메서드를 정의할 수도 있지만 같은 요청 주소에서 요청 방식에 따라 메서드를 정의할 수도 있습니다.
 * GET, POST, PUT, DELELTE, PATCH 에 대해 처리할 수 있습니다.
 * 
 * @RequestMapping RequestMapping 어노테이션은 요청 주소 셋팅 뿐만 아니라 요청 방식도 설정할 수 있습니다.
 * 
 * @RequestMapping(value = "/test1", method = RequestMethod.GET) public String
 * test1() { return "test1"; }
 * 
 * 요청 어노테이션
 * 
 * RequestMapping 대신 요청별로 제공되는 어노테이션을 사용할 수도 있습니다.
 * 
 * @GetMapping("/test4") public String test4() { return "test4"; }
 * 
 * @PostMapping("/test5") public String test5() { return "test5"; }
 * 
 * 
 * 동시에 설정하기
 * 
 * RequestMapping은 요청 방식들을 동시에 설정할 수 있습니다.
 * 
 * @RequestMapping(value = "/test7", method = {RequestMethod.GET,
 * RequestMethod.POST}) public String test7() { return "test7"; }
 */

/*
 * Parameter 추출하기 ------------------------- 클라이언트 요청 발생 시 전달하는 파라미터 데이터를 손쉽게 주입
 * 받을 수 있도록 다양한 방식을 제공하고 있습니다. Spring MVC는 Servlet/JSP 처럼 요청 방식에 따라 파라미터 추출하는
 * 방식이 달라지지는 않습니다.
 * 
 * - HttpServletRequest 사용하기 1) Spring MVC는 필요한 객체나 데이터는 주입을 받아 사용하게 됩니다. 2)
 * Servlet/JSP에서 파라미터 데이터를 추출할 때 HttpServletRequest request 객체를 통하게 되는데 Spring
 * MVC에서 이 객체를 주입 받아 사용할 수 있습니다. 3) 파라미터 추출 뿐만 아니라 HttpServletRequest 객체가 필요할 경우
 * 사용하면 됩니다.
 * 
 * @GetMapping("/test1") public String test1(HttpServletRequest request) {
 * 
 * String data1 = request.getParameter("data1"); String data2 =
 * request.getParameter("data2"); String [] data3 =
 * request.getParameterValues("data3");
 * 
 * … 생략 }
 * 
 * 
 * - WebRequest 사용하기 WebRequest는 HttpServletRequest 클래스를 확장한 클래스입니다.
 * 
 * @GetMapping("/test3") public String test3(WebRequest request) {
 * 
 * String data1 = request.getParameter("data1"); String data2 =
 * request.getParameter("data2"); String [] data3 =
 * request.getParameterValues("data3");
 * 
 * …생략… }
 * 
 * 
 * - @PathVariable 데이터가 요청 주소에 있을 경우 값을 주입 받을 수 있는 어노테이션입니다. Restful API 서버
 * 프로그래밍시 많이 사용하는 방식입니다. 데이터1/2/3 요청주소/값1/값2/값3
 * 
 * 형 변환
 * 
 * @GetMapping("/test4/{data1}/{data2}/{data3}") public String
 * test4(@PathVariable int data1, 
 * 
 * @PathVariable int data2, 
 * 
 * @PathVariable int data3) { ......... }
 * 
 * - @RequestParam 1) 파라미터 데이터를 직접 주입 받을 수 있습니다. 2) 지정된 변수의 이름과 파라미터의 이름이 같을 경우
 * 값을 주입 받습니다. 3) 가능한 경우 형 변환도 처리해줍니다. 4) value : 파라미터의 이름과 변수의 이름이 다를 경우 파라미터
 * 이름을 지정합니다. 5) required : false를 설정하면 지정된 이름의 파라미터가 없을 경우 null이 주입되고, 있으면 넘어온
 * 값으로 됩니다.(문자인 경우) 6) (defaultValue = "0")설정하면 기본값으로 설정되고, 있으면 넘어온 값으로 됩니다.
 * 
 * @GetMapping("/test7") public String test7(@RequestParam(value = "data1")
 * String value1,
 * 
 * @RequestParam(value = "data2", required = false) String value2,
 * 
 * @RequestParam(value = "data3", defaultValue = "default") String value3) {
 * 
 * .......... }
 * 
 */