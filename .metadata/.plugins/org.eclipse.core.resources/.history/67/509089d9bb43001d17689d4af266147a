
public class Adder {

	public static void main(String[] args) {
		int sum = 100 + 500;
		System.out.println("Adder: " + sum);

	}

}


/* 
 * Spring (2003.2월 Expert one-on-one J2EE Design and Development 라는 책을 통하여 오픈소스 형태로 시작
 * 		   2008년경 탄생=로드존슨, 2013년 11월 중순경 채택 => 전자정부 프레임워크로 사용하기 시작 (뼈대가 Spring))
 * -핵심 계층
 * 	1)프리젠테이션 계층 : SpringFramework
 * 					-사용자 인터페이스 역할
 * 					-브라우저상에서 클라이언트의 요청 및 응답을 처리
 * 					-서비스 계층, 데이터 엑세스 계층에서 발생하는 예외상황을 처리
 * 					-@controller를 사용하여 처리한다.
 * 
 * 	2)제어 계층 : 프리젠테이션 계층과 비지니스 로직 계층을 분리하기 위하여 컨트롤러를 제공한다.
 * 
 * 	3)비지니스 로직(service) 계층 : 핵심 업무를 어떻게 처리하는가를 보여주는 방법이 기술된 계층
 * 					-애플리케이션의 비지니스 로직 처리와 관련된 도메인 모델의 적합성(validation) 검증
 * 					-Transaction 관리
 * 					-Service 인터페이스와 @Service 사용하여 Service class를 구현
 * 					-프리젠테이션 계층과 persistence (DAO) 계층을 연결하는 역할을 하는데, 이는 두 계층이 직접적으로 통신하지 않도록
 * 					 하는것이 이유
 * 						두 계층이 직접 통신하지 않는 이유)	  1. 코드의 재사용성
 * 													  2. 유지보수의 편리성
 * 												      3. 확장성
 *  
 * 	4)Persistence(DAO) 퍼시턴스 계층 : 데이터 처리를 담당(DB CRUD), DTO = VO
 * 					- ORM library를 사용 ( MyBatis, Hibernate 등)을 주로 사용하는 계층
 * 					- DAO 인터페이스와 @Repository을 사용하여 DAO class를 구현
 * 					- DataBase에 CRUD하는 계층
 * 
 * 	5)도메인 모델 계층 : 각 계층 사이에 전달되는 파라메터(객체)-어디에 담아서 처리한다.
 */