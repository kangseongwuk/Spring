package kr.co.ezen.main;

import org.springframework.context.support.ClassPathXmlApplicationContext;

import kr.co.ezen.beans.HelloENG3;
import kr.co.ezen.beans.HelloKOR3;

/*
 * IOC
 * -Inversion of Control :  개발자가 코드 등의 흐름이나 객체 생성에 관련된 코드를 프로그래밍에 직접 작성하는 것이 아니라,
 * 							프레임워크가 사용하는 파일에 작성하여 이를 토대로 프레임워크가 객체를 생성하고,
 * 							반환하고, 코드가 동작하는 순서를 결정하는 것을 의미 합니다.
 * -객체의 생성, 생명주기의 관리까지 모든 객체에 대한 제어권을 가진다.
 * -IoC 컨테이너는 객체의 생성을 책임지고, 의존성을 관리합니다.
 * -POJO의 생성, 초기화, 서비스, 소멸에 대한 권한을 가지게 됩니다.
 * -개발자들이 직접 POFO를 생성 할 수 있지만, 컨테이너에게 맡긴다. (BEAN등록 => XML파일)
 * 
 * 2가지 표현
 * 	1.의존성 검색 : DL(DataBase연결), Connection Pool(server.xml), Driver
 * 		-DL (DB연결)
 * 			Class.forName("Oracle.jdbc.OracleDriver");
 * 			String url = 
 * 			String id = 
 * 			String pw = 
 * 			conn = DirverManager.getConnection(url,id,pw);
 * 
 * 		-Connection Pool(server.xml, context.xml)
 * 
 * Con
 * 
 * 
 * 	2.의존성 주입 : DI => Setter Injection, Constructor Injection, Method Injection
 * 		각 클래스간에 의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해 줍니다.
 * 
 * 	-객체의 생성은 빈 등록이 아니라, getBean()를 호출하므로써 객체가 생성됩니다.
 * 
 * -종류
 * 		1)BeanFactory : 3.x 주로 사용
 * 			-클래스를 통하여 객체를 생성하고, 이를 전달합니다.
 * 			-상속 등 객체간의 관계를 형성하고 관리합니다.
 * 				<종류>
 * 			ApplicationEventPublisher, ListableBeanFactory, MessageSource, ResourceLoader ...
 * 			xmlBeanFacotry
 * 		2)ApplicationContext
 * 			-BeanFacotry 상속받아 기본적인 컨테이너 기능 + 확장기능 제공
 * 			-확장한 기능 : 메세지 소스 처리 기능, 이벤트 발행기능, 리소스로딩 가능, 트랜잭션 관리 등등...
 * 						컨테이너의 구동되는 시점에 bean에 등록되어 있는 클래스를 객체화하는 즉시 로딩 방식.
 * 			-클래스를 통하여 객체를 생성하고, 이를 전달합니다.
 * 			-상속 등 객체간의 관계를 형성하고 관리합니다.
 * 			-국제화 지원 등 문자열에 대한 다양한 기능을 제공합니다.
 * 			-리스너로 등록되어 있는 Bean에 이벤트를 발생할 수 있다.
 * 			-Bean에 관련한 설정을 위한 xml 파일은 즉시 로딩되어서 객체를 미리 생성하여 가지게 됩니다.
 * 
 * <종류>
 * StaticApplicationContext, genericXmlApplicationContext, WebApplicationContext,
 * 
 */

public abstract class mainClass{

	public static void main(String[] args) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("kr/co/ezen/config/beans.xml");
		
		/*
		 * 문제1> abstract class를 적용 안녕하세요라는 메세지를 영문버전과 한글 버전으로 출력하세요.
		 * 영문> Hello~
		 * 한글> 안녕하세요~
		 * 
		 */

		//abstract class 적용
		HelloENG3 heEng = (HelloENG3) context.getBean("helloENG3");
		callHelloKOR(heEng);
		//xml버전 적용 helloENG3
		
		HelloKOR3 heKOR = (HelloKOR3) context.getBean("helloKOR3");
		callHelloKOR(heKOR);
		
	}
	
	private static void callHelloKOR(HelloKOR3 heKOR) {
		heKOR.sayHI();
		
	}

	private static void callHelloKOR(HelloENG3 heEng) {
		heEng.sayHI();
		
	}



}
