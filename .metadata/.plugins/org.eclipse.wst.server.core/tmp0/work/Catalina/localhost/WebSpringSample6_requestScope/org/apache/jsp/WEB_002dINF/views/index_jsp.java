/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2022-10-19 08:46:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>Hello Spring MVC Java</h1>\r\n");
      out.write("	<img src=\"image/bmwmodel_205.png\"/><br>\r\n");
      out.write("	\r\n");
      out.write("	<a href=\"test1\">test1 - MessageProperties Test</a><br>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("<!-- \r\n");
      out.write(" Properties\r\n");
      out.write("---------------------\r\n");
      out.write(" - 애플리케이션을 개발할 때 프로그램 실행 중 절대 변하지 않는 값들이 있을 수 있습니다.\r\n");
      out.write(" - Spring MVC에서는 이러한 값들을 properties 파일에 작성하고 이를 가져다 사용할 수 있도록 제공되고 있습니다.\r\n");
      out.write("\r\n");
      out.write(" - Propery Editor\r\n");
      out.write("  1) Properties 파일에 한글을 작성하면 유니코드 형식의 문자열로 변경됩니다.\r\n");
      out.write("     이는 Property Editor 설치로 해결할 수 있습니다.\r\n");
      out.write("  2) http://propedit.sourceforge.jp/eclipse/updates\r\n");
      out.write("\r\n");
      out.write(" - @PropertySource, @PropertySources\r\n");
      out.write("  1) 사용할 properties 파일을 지정합니다.\r\n");
      out.write("  2) 하나 혹은 다수의 파일을 지정할 수 있습니다.\r\n");
      out.write("\r\n");
      out.write("  @Controller\r\n");
      out.write("  @PropertySource(\"/WEB-INF/properties/data1.properties\")\r\n");
      out.write("  @PropertySource(\"/WEB-INF/properties/data2.properties\")\r\n");
      out.write("	public class TestController {\r\n");
      out.write("			.........\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("  @Controller\r\n");
      out.write("  @PropertySources({\r\n");
      out.write("	@PropertySource(\"/WEB-INF/properties/data1.properties\"),\r\n");
      out.write("	@PropertySource(\"/WEB-INF/properties/data2.properties\")\r\n");
      out.write("   })\r\n");
      out.write("	public class TestController {\r\n");
      out.write("			.........\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("  @Controller\r\n");
      out.write("  @PropertySource(value = {\r\n");
      out.write("	(\"/WEB-INF/properties/data1.properties\"),\r\n");
      out.write("	(\"/WEB-INF/properties/data2.properties\")\r\n");
      out.write("   })	\r\n");
      out.write(" 	public class TestController {\r\n");
      out.write("			.........\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write(" - @Value\r\n");
      out.write("   properties 파일에 작성한 값을 주입 받을 수 있습니다.\r\n");
      out.write("\r\n");
      out.write("   @Value(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${aaa.a1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\")\r\n");
      out.write("    private int a1;\r\n");
      out.write("\r\n");
      out.write("   @Value(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${aaa.a2}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\")\r\n");
      out.write("    private String a2;\r\n");
      out.write("\r\n");
      out.write(".Message  \r\n");
      out.write("------------------------------------------------\r\n");
      out.write(" - Properties\r\n");
      out.write("  1) 이전 시간에 살펴본 Properties를 활용하면 다양한 값들을 미리 정의 해놓고 \r\n");
      out.write("     이를 Spring MVC에서는 가져다 사용할 수 있습니다.\r\n");
      out.write("  2) Properties에 작성한 값을 JSP에서 사용하고자 한다면 몇 가지 설정이 필요합니다.\r\n");
      out.write("\r\n");
      out.write(" - Message\r\n");
      out.write("  1) Properties 파일을 Message로 등록하면 이 데이터는 JSP에서도 사용할 수 있습니다.\r\n");
      out.write("  2) Properties 파일을 Message로 등록하면 다국어 처리가 가능해집니다.\r\n");
      out.write("\r\n");
      out.write(" - MessageSource\r\n");
      out.write("  1) MessageSource 객체를 이용해 properties 파일을 등록해주면 Message로 등록할 수 있습니다. \r\n");
      out.write("  2) 여기에서는 일정 시간마다 한번씩 갱신되는 ReloadableResourceBundleMessageSource를 사용합니다.\r\n");
      out.write("\r\n");
      out.write(" - Java에서 사용하기\r\n");
      out.write("  1) Message로 등록된 데이터를 Java 코드에서 사용하고자 한다면 \r\n");
      out.write("     MessageSource를 주입 받아 사용하면 됩니다.\r\n");
      out.write("  2) 이 때, Locale을 지정하면 다국어 처리가 가능합니다.\r\n");
      out.write("  3) @Autowired\r\n");
      out.write("	ReloadableResourceBundleMessageSource res;\r\n");
      out.write("\r\n");
      out.write(" - JSP에서 사용하기\r\n");
      out.write(" 1) Message로 등록된 데이터를 JSP에서 사용하고자 한다면 message 커스텀 태그를 사용합니다.\r\n");
      out.write(" 2) <h3>a1 : <spring:message code=\"aaa.a1\"/></h3>\r\n");
      out.write("\r\n");
      out.write(" * Properties 파일을 Message로 등록하게 되면 JSP에서도 사용할 수 있으며 다국어 처리도 가능해 집니다.\r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
