/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2022-10-18 08:35:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-5.3.3.jar", Long.valueOf(1665037876393L));
    _jspx_dependants.put("jar:file:/D:/Spring-workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/WebSpringSample7_SessionScope/WEB-INF/lib/spring-webmvc-5.3.3.jar!/META-INF/spring-form.tld", Long.valueOf(1610400454000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>Hello Spring MVC Java</h1>\r\n");
      out.write("	<img src=\"image/bmwmodel_205.png\"/><br>\r\n");
      out.write("	\r\n");
      out.write("	<!-- form:option -->\r\n");
      out.write("	<a href=\"test1\">test1 - SessionScope Test </a><br>\r\n");
      out.write("	<a href=\"result\">Result</a><br>\r\n");
      out.write("	<a href=\"test2\">test2 - HttpSession Test </a><br>\r\n");
      out.write("	<a href=\"result2\">Result2</a><br>\r\n");
      out.write("	<a href=\"test3\">test3 - HttpSession DataBean Test </a><br>\r\n");
      out.write("	<a href=\"result3\">Result3</a><br>\r\n");
      out.write("	<a href=\"test4\">test4 - HttpSession DataBean ModelAttribute Test </a><br>\r\n");
      out.write("	<a href=\"result4\">Result4</a><br>\r\n");
      out.write("\r\n");
      out.write("	<!-- \r\n");
      out.write("	SessionScope\r\n");
      out.write("----------------------\r\n");
      out.write(" - Session\r\n");
      out.write(" 1) 브라우저가 최초로 서버에 요청을 하게 되면 브라우저당 하나씩 메모리 공간을 서버에서 할당하게 됩니다.\r\n");
      out.write(" 2) 이 메모리 영역은 브라우저당 하나씩 지정되며 요청이 새롭게 발생하더라도 같은 메모리 공간을 사용하게 됩니다. 이러한 공간을 session 이라고 부릅니다.\r\n");
      out.write(" 3) 이 영역은 브라우저를 종료할 때 까지 서버에서 사용할 수 있습니다.\r\n");
      out.write("\r\n");
      out.write(" - SessionScope\r\n");
      out.write(" 1) 브라우저가 최초의 요청을 발생 시키고 브라우저를 닫을 때 까지를 SessionScope라고 부릅니다.\r\n");
      out.write(" 2) SessionScope 에서는 session 영역에 저장되어 있는 데이터나 객체를 자유롭게 사용할 수 있습니다.\r\n");
      out.write("\r\n");
      out.write("  @SessionAttribute\r\n");
      out.write("   1) Session 영역에 저장되어 있는 객체를 사용하고자 할 때 메서드의 매개변수로 @SessionAttribute를 설정하면 Session 영역에 저장되어 있는 Bean 을 주입 받을 수 있습니다. \r\n");
      out.write("   (DataBean1 : set/get)\r\n");
      out.write("\r\n");
      out.write("  @SessionAttributes\r\n");
      out.write("   1) @ModelAttribute를 통해 주입 받는 Bean은 자동으로 Request 영역에 저장되고 Request 영역으로 부터 주입을 받게 됩니다.\r\n");
      out.write("   2) 이 때, @ModelAttribute를 통해 주입받는 Bean을 \r\n");
      out.write("   		@SessionAttributes로 지정해 놓이면 request 영역이 아닌 session 영역에 저장되고 \r\n");
      out.write("   		session 영역으로 부터 주입 받을 수 있습니다.\r\n");
      out.write("   3) 주의할 점은 @ModelAttribute를 활용하여 객체를 생성해 반환하는 메서드를 반드시 작성해 줘야 합니다.\r\n");
      out.write("\r\n");
      out.write("  * session 영역에 데이터를 저장하게 되면 SessionScope 내에서 사용이 가능합니다.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".SessionScope 빈 주입\r\n");
      out.write("---------------------------\r\n");
      out.write(" - SessionScope\r\n");
      out.write("  1) Bean을 정의할 때 session scope로 정의하면 브라우저가 서버에 최초의 요청을 보낼 때 \r\n");
      out.write("     Bean 객체가 주입됩니다.\r\n");
      out.write("  2) 주입된 Bean은 주입만 이루어지는 것이므로 session 영역에 저장되지는 않습니다.\r\n");
      out.write("  3) Java 방식은 @SessionScope 를 사용합니다.\r\n");
      out.write("  4) XML 방식은 bean을 정의할 때 scope=“session”으로 설정합니다.\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	 -->\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
